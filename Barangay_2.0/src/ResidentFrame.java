/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

public class ResidentFrame extends javax.swing.JFrame {

    /**
     * Creates new form ResidentFrame
     */
    public ResidentFrame() {
        initComponents();
        setTitle("RESIDENTS");
        loadResidents();
        loadResidentNames();
        setLocationRelativeTo(null);
    }

    public void loadResidents() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT first_name, last_name, birth_date, address, contact_number, status, date_registered FROM residents");
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                String birthDate = rs.getString("birth_date");
                String address = rs.getString("address");
                String contact = rs.getString("contact_number");
                String status = rs.getString("status");
                String dateRegistered = rs.getString("date_registered");

                model.addRow(new Object[]{firstName, lastName, birthDate, address, contact, status, dateRegistered});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void loadResidentNames() {
        NameComboBox.removeAllItems(); // Clear previous items
        NameComboBox.addItem("Select a Name"); // Default placeholder

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT first_name, last_name FROM residents");
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                String fullName = rs.getString("first_name") + " " + rs.getString("last_name");
                NameComboBox.addItem(fullName); // Add names to the combo box
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public void getResidentDetails(String fullName) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT resident_id, first_name, last_name, birth_date, address, contact_number, status, date_registered FROM residents WHERE CONCAT(first_name, ' ', last_name) = ?")) {

            pstmt.setString(1, fullName);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                int residentId = rs.getInt("resident_id"); // Retrieve the resident ID
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                String birthDate = rs.getString("birth_date");
                String address = rs.getString("address");
                String contact = rs.getString("contact_number");
                String status = rs.getString("status");
                String dateRegistered = rs.getString("date_registered");

                // Now pass residentId to UpdateResident constructor
                UpdateResident updateFrame = new UpdateResident(residentId, firstName, lastName, birthDate, address, contact, status, dateRegistered);
                updateFrame.setVisible(true);
            } else {
                System.out.println("No resident found!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        NameComboBox = new javax.swing.JComboBox<>();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel1.setText("BARANGAY MANAGEMENT SYSTEM");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel2.setText("BARANGAY MANAGEMENT SYSTEM");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        jTable1.setFont(new java.awt.Font("Nirmala UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Birth Date", "Address", "Contact Number", "Status", "Date Registered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 60, 650, 250));

        NameComboBox.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        jPanel1.add(NameComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 130, 30));

        AddButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 100, 30));

        UpdateButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 390, 100, 30));

        DeleteButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, 100, 30));

        RefreshButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, 100, 30));

        BackButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        jPanel1.add(BackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, 100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        AddResident addResidentFrame = new AddResident();
        addResidentFrame.setVisible(true);
    }//GEN-LAST:event_AddButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        loadResidents();
        loadResidentNames();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        String selectedName = (String) NameComboBox.getSelectedItem();

        if (selectedName != null && !selectedName.equals("Select a Name")) {
            getResidentDetails(selectedName);
        } else {
            System.out.println("Please select a valid resident!");
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        String selectedName = (String) NameComboBox.getSelectedItem();

        String fullName = null;

        if (selectedRow != -1) {
            // Get name from selected row in table
            String firstName = (String) jTable1.getValueAt(selectedRow, 0);
            String lastName = (String) jTable1.getValueAt(selectedRow, 1);
            fullName = firstName + " " + lastName;
        } else if (selectedName != null && !selectedName.equals("Select a Name")) {
            // Get name from combo box
            fullName = selectedName;
        }

        if (fullName != null) {
            // Confirm deletion
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + fullName + "?", "Confirm Delete", javax.swing.JOptionPane.YES_NO_OPTION);

            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                try (Connection conn = DatabaseConnection.getConnection();
                     PreparedStatement pstmt = conn.prepareStatement("DELETE FROM residents WHERE CONCAT(first_name, ' ', last_name) = ?")) {

                    pstmt.setString(1, fullName);
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Resident deleted successfully!");
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "Resident not found!");
                    }

                    // Refresh table and combo box after deletion
                    loadResidents();
                    loadResidentNames();
                } catch (Exception e) {
                    e.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, "Error deleting resident!");
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a resident to delete!");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        MainDashboard maindashboard = new MainDashboard();
        maindashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResidentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResidentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResidentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResidentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResidentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JComboBox<String> NameComboBox;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
